# -*- coding: utf-8 -*-
"""Titanic_task_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e6k4JqN-RxI_tfUWmCrSStGnV3lHBnVn
"""

from google.colab import files
uploaded = files.upload()

#TASK 2 - EDA
#Run the full EDA script
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import numpy as np

# Load uploaded Titanic file
df = pd.read_csv('titanic_advanced.csv')

print("="*50)
print("1️⃣ ASK MEANINGFUL QUESTIONS")
print("="*50)
print(df.head())
print(df.tail())
print("\nShape:", df.shape)
df.info()
print(df.describe(include='all'))
print("\nMissing Values:\n", df.isnull().sum())

print("\nQuestions:")
print("- Who survived and why?")
print("- Does class, sex, age affect survival?")
print("- Any missing ages or cabins?")

print("="*50)
print("2️⃣ EXPLORE DATA STRUCTURE")
print("="*50)
print(df.columns)
print(df.dtypes)
print(df.nunique())

sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Data Heatmap")
plt.show()

# Countplots for basic categorical features
for col in ['Sex', 'Embarked', 'Pclass', 'Survived']:
    sns.countplot(x=col, data=df)
    plt.title(f'Countplot: {col}')
    plt.show()

print("="*50)
print("3️⃣ IDENTIFY TRENDS, PATTERNS, ANOMALIES")
print("="*50)

df['Age'].hist(bins=20)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.show()

sns.boxplot(x='Pclass', y='Age', data=df)
plt.title('Age vs Pclass')
plt.show()

sns.pairplot(df[['Survived', 'Pclass', 'Age', 'Fare']].dropna(), hue='Survived')
plt.show()

print("="*50)
print("4️⃣ TEST HYPOTHESES & VALIDATE ASSUMPTIONS")
print("="*50)

# ✅ SAFE: Select only numeric columns and coerce to numeric
numeric_cols = df[['Survived', 'Pclass', 'Age', 'Fare', 'SibSp', 'Parch']].apply(pd.to_numeric, errors='coerce')
print(numeric_cols.dtypes)

# Correlation
corr = numeric_cols.corr()
print(corr)
sns.heatmap(corr, annot=True)
plt.title('Correlation Matrix')
plt.show()

# Example t-test: Does Fare differ for Survived vs Not Survived?
survived = df[df['Survived'] == 1]['Fare']
not_survived = df[df['Survived'] == 0]['Fare']
t_stat, p_value = stats.ttest_ind(survived.dropna(), not_survived.dropna())
print(f"T-Test Fare Survived vs Not Survived: T={t_stat}, P={p_value}")

print("="*50)
print("5️⃣ DETECT DATA ISSUES")
print("="*50)
print(df.isnull().sum())
print(f'Duplicates: {df.duplicated().sum()}')

z_scores = np.abs(stats.zscore(numeric_cols.dropna()))
outliers = (z_scores > 3).sum()
print(f'Outliers (Z>3):\n{outliers}')

print("✅ Titanic EDA Complete")